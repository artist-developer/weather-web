{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","data","coord","lon","lat","weather","id","main","description","icon","base","temp","feels_like","temp_min","temp_max","pressure","humidity","visibility","wind","speed","deg","clouds","all","dt","sys","type","country","sunrise","sunset","timezone","name","cod","loading","getWeather","a","axios","get","error","console","log","setState","this","style","flex","height","display","flexDirection","alignItems","justifyContent","backgroundColor","weatherOptions","color","title","subtitle","Component","Haze","iconName","Mist","Smoke","Fog","Ash","Dust","Thunderstorm","Drizzle","Rain","Snow","Clear","Clouds","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b52de92c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nconst region = \"Seoul\";\nexport default class App extends Component {\n  state = {\n    data: {\n      coord: { lon: 0, lat: 0 },\n      weather: [{ id: 0, main: \"\", description: \"\", icon: \"\" }],\n      base: \"\",\n      main: {\n        temp: 0,\n        feels_like: 0,\n        temp_min: 0,\n        temp_max: 0,\n        pressure: 0,\n        humidity: 0,\n      },\n      visibility: 0,\n      wind: { speed: 0, deg: 0 },\n      clouds: { all: 0 },\n      dt: 0,\n      sys: {\n        type: 1,\n        id: 0,\n        country: \"KR\",\n        sunrise: 0,\n        sunset: 0,\n      },\n      timezone: 0,\n      id: 0,\n      name: \"Seoul\",\n      cod: 0,\n    },\n    loading: true,\n  };\n\n  componentDidMount() {\n    this.getWeather();\n  }\n  getWeather = async () => {\n    const { data, error } = await axios.get(\n      \"http://103.244.111.87:8080/get-weather\"\n    );\n\n    if (error) {\n      console.log(error);\n    }\n    console.log(\"data : \" + data);\n    this.setState({ loading: false, data: data });\n\n    return data;\n  };\n  render() {\n    return (\n      <div\n        style={{\n          flex: 1,\n          height: \"100vh\",\n          display: \"flex\",\n          flexDirection: `row`,\n          alignItems: `center`,\n          justifyContent: `center`,\n          backgroundColor: weatherOptions[this.state.data.weather[0].main]\n            ? weatherOptions[this.state.data.weather[0].main].color[0]\n            : \"white\",\n        }}\n      >\n        {this.state.loading ? (\n          <h1>로딩중입니다</h1>\n        ) : (\n          <div>\n            <h1>오늘의 {region} 날씨입니다.</h1>\n\n            <h2>{weatherOptions[this.state.data.weather[0].main].title}</h2>\n            <h2>{weatherOptions[this.state.data.weather[0].main].subtitle}</h2>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst weatherOptions = {\n  Haze: {\n    iconName: \"weather-fog\",\n    color: [\"#606c88\", \"#3f4c6b\"],\n    title: \"안개가 짙어요.\",\n    subtitle: \"운전이나 야외 활동 할 때 조심하세요~\",\n  },\n  Mist: {\n    iconName: \"weather-fog\",\n    color: [\"#606c88\", \"#3f4c6b\"],\n    title: \"안개가 짙어요.\",\n    subtitle: \"운전이나 야외 활동 할 때 조심하세요~\",\n  },\n  Smoke: {\n    iconName: \"weather-fog\",\n    color: [\"#606c88\", \"#3f4c6b\"],\n    title: \"안개가 짙어요.\",\n    subtitle: \"운전이나 야외 활동 할 때 조심하세요~\",\n  },\n  Fog: {\n    iconName: \"weather-fog\",\n    color: [\"#606c88\", \"#3f4c6b\"],\n    title: \"안개가 짙어요.\",\n    subtitle: \"운전이나 야외 활동 할 때 조심하세요~\",\n  },\n  Ash: {\n    iconName: \"weather-fog\",\n    color: [\"#606c88\", \"#3f4c6b\"],\n    title: \"안개가 짙어요.\",\n    subtitle: \"운전이나 야외 활동 할 때 조심하세요~\",\n  },\n  Dust: {\n    iconName: \"weather-fog\",\n    color: [\"#544a7d\", \"#ffd452\"],\n    title: \"먼지가 많아요.\",\n    subtitle: \"야외 활동을 삼가해주세요. 마스크는 필수!!\",\n  },\n  Thunderstorm: {\n    iconName: \"weather-lightning\",\n    color: [\"#232526\", \"#414345\"],\n    title: \"폭풍우 에요!!\",\n    subtitle: \"오늘은 집돌이 집순이가 됩시다 ㅎㅎ\",\n  },\n  Drizzle: {\n    iconName: \"weather-rainy\",\n    color: [\"#4c669f\", \"#3b5998\", \"#192f6a\"],\n    title: \"비가 조금씩 떨어져요.\",\n    subtitle:\n      \"'가랑비에 옷 젖는 줄 모른다' 라는 속담이 있죠. 우산 가져가세요~~\",\n  },\n  Rain: {\n    iconName: \"weather-pouring\",\n    color: [\"#0f0c29\", \"#302b63\", \"#24243e\"],\n    title: \"비가 많이 와요!!\",\n    subtitle: \"우산 꼭 꼭 챙기세요!!\",\n  },\n  Snow: {\n    iconName: \"weather-snowy\",\n    color: [\"#757f9a\", \"#d7dde8\"],\n    title: \"눈이 내려요.\",\n    subtitle: \"야외 활동시 미끄러지지 않게 조심하세요!\",\n  },\n  Clear: {\n    iconName: \"weather-sunny\",\n    color: [\"#2193b0\", \"#6dd5ed\"],\n    title: \"날씨가 맑아요.\",\n    subtitle: \"오늘 야외 활동을 해보는게 어때요??\",\n  },\n  Clouds: {\n    iconName: \"weather-cloudy\",\n    color: [\"#403b4a\", \"#e7e9bb\"],\n    title: \"구름이 많아요.\",\n    subtitle: \"날씨가 꿀꿀 하지만 신나는 음악으로 기분 전환 해봐요~\",\n  },\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}